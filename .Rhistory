q()
pwd
q()
setwd("~/")
add2 <- function(x, y){}
x + y
}
add2 <- function(x, y){
x + y
}
add2(4,8)
above <- function(x, n){
use <- n > 10
x[use]
}
columnmean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnmean <- function(x, removeNA = TRUE){
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i], no.rm = removeNA)
}
means
}
formals(lm)
formals(plot)
formals(paste)
arg(paste)
args(paste)
args(lapply)
formals(lapply)
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
formals(runif)
str(tapply)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
f
tapply(x, f, mean)
str(aply)
str(apply)
?strptime
cube <- function(x, n) {
x^3
}
strptime
p <- strptime()
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
arg(cbind)
args(cbind)
lm
search()
mean(x)
mean(r)
traceback()
lm(y ~ x)
traceback()
debug(lm)
lm(y ~ x)
n
library(datasets)
data(iris)
?iris
iris
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
str
?str
str(str)
str(lm)
x <- rnorm(100,2,4)
summary(x)
str(x)
library(swirl)
swirl()
5+7
x <- 5 + 7
x
y <- x-3
y
z<-  c(1.1, 9, 3.14)
?c
z
f <- (z, 555)
f <- (z, 555, z)
f <- c(z, 555, z)
f <- c(z, 555, z)
z <- c(z, 555, z)
info()
c(z, 555, z)
z * 2 + 100
z*2
z*2+100
my_sqrt <- z*2+100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
d<- c(1, 2,3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
(z * 2 + 100)
(z * 2 + 1000)
z*2+1000
my_div
exit
q()
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X
X[,1]
X[which(X$var2 > 8),]
# train data
datatrainX<- read.table("../UCI HAR Dataset/train/X_train.txt")
datatrainY <- read.table("../UCI HAR Dataset/train/y_train.txt")
datatrainsubject <- read.table("../UCI HAR Dataset/train/subject_train.txt")
# test data
datatestX <- read.table("../UCI HAR Dataset/test/X_test.txt")
datatestY <- read.table("../UCI HAR Dataset/test/y_test.txt")
datatestsubject <- read.table("../UCI HAR Dataset/test/subject_test.txt")
# merge data
datamergeX <- rbind(datatrainX, datatestX)
datamergeY <- rbind(datatrainY, datatestY)
datamergesubject <- rbind(datatrainsubject, datatestsubject)
# 2. load features.txt to find mean and std labels
features <- read.table("../UCI HAR Dataset/features.txt")
data_mean <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
datamergeX <- datamergeX[, data_mean]
names(datamergeX) <- features[data_mean, 2]
names(datamergeX) <- gsub("\\(|\\)", "", names(datamergeX))
names(datamergeX) <- tolower(names(datamergeX))
# 3. load activity_labels.tx with labels
labels <- read.table("../UCI HAR Dataset/activity_labels.txt")
labels[, 2] = gsub("_", "", tolower(as.character(labels[, 2])))
datamergeY[,1] = labels[datamergeY[,1], 2]
names(datamergeY) <- "activity"
# 4. Merge and labeled data
names(datamergesubject) <- "subject"
datalabeled<- cbind(datamergesubject, datamergeY, datamergeX)
write.table(datalabeled, "labeled_data.txt")
# 5.
uniqueSubjects = unique(datamergesubject)[,1]
numSubjects = length(unique(datamergesubject)[,1])
numActivities = length(labels[,1])
numCols = dim(datalabeled)[2]
result = datalabeled[1:(numSubjects*numActivities), ]
row = 1
for (s in 1:numSubjects) {
for (a in 1:numActivities) {
result[row, 1] = uniqueSubjects[s]
result[row, 2] = labels[a, 2]
tmp <- datalabeled[datalabeled$subject==s & datalabeled$activity==labels[a, 2], ]
result[row, 3:numCols] <- colMeans(tmp[, 3:numCols])
row = row+1
}
}
write.table(result, "averages_data.txt")
setwd("D:/Cursos/Getting and Cleaning Data/proyecto/Github/Getting_Cleaning_Data")
# train data
datatrainX<- read.table("../UCI HAR Dataset/train/X_train.txt")
datatrainY <- read.table("../UCI HAR Dataset/train/y_train.txt")
datatrainsubject <- read.table("../UCI HAR Dataset/train/subject_train.txt")
# test data
datatestX <- read.table("../UCI HAR Dataset/test/X_test.txt")
datatestY <- read.table("../UCI HAR Dataset/test/y_test.txt")
datatestsubject <- read.table("../UCI HAR Dataset/test/subject_test.txt")
# merge data
datamergeX <- rbind(datatrainX, datatestX)
datamergeY <- rbind(datatrainY, datatestY)
datamergesubject <- rbind(datatrainsubject, datatestsubject)
# 2. load features.txt to find mean and std labels
features <- read.table("../UCI HAR Dataset/features.txt")
data_mean <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
datamergeX <- datamergeX[, data_mean]
names(datamergeX) <- features[data_mean, 2]
names(datamergeX) <- gsub("\\(|\\)", "", names(datamergeX))
names(datamergeX) <- tolower(names(datamergeX))
# 3. load activity_labels.tx with labels
labels <- read.table("../UCI HAR Dataset/activity_labels.txt")
labels[, 2] = gsub("_", "", tolower(as.character(labels[, 2])))
datamergeY[,1] = labels[datamergeY[,1], 2]
names(datamergeY) <- "activity"
# 4. Merge and labeled data
names(datamergesubject) <- "subject"
datalabeled<- cbind(datamergesubject, datamergeY, datamergeX)
write.table(datalabeled, "labeled_data.txt")
# 5. Creates a 2nd, independent tidy data set with the average of each variable for each activity and each subject.
uniqueSubjects = unique(datamergesubject)[,1]
numSubjects = length(unique(datamergesubject)[,1])
numActivities = length(labels[,1])
numCols = dim(datalabeled)[2]
result = datalabeled[1:(numSubjects*numActivities), ]
row = 1
for (s in 1:numSubjects) {
for (a in 1:numActivities) {
result[row, 1] = uniqueSubjects[s]
result[row, 2] = labels[a, 2]
tmp <- datalabeled[datalabeled$subject==s & datalabeled$activity==labels[a, 2], ]
result[row, 3:numCols] <- colMeans(tmp[, 3:numCols])
row = row+1
}
}
write.table(result, "averages_data.txt")
datatrainX<- read.table("../UCI HAR Dataset/train/X_train.txt")
datatrainY <- read.table("../UCI HAR Dataset/train/y_train.txt")
datatrainsubject <- read.table("../UCI HAR Dataset/train/subject_train.txt")
# test data
datatestX <- read.table("../UCI HAR Dataset/test/X_test.txt")
datatestY <- read.table("../UCI HAR Dataset/test/y_test.txt")
datatestsubject <- read.table("../UCI HAR Dataset/test/subject_test.txt")
# merge data
datamergeX <- rbind(datatrainX, datatestX)
datamergeY <- rbind(datatrainY, datatestY)
datamergesubject <- rbind(datatrainsubject, datatestsubject)
# 2. load features.txt to find mean and std labels
features <- read.table("../UCI HAR Dataset/features.txt")
data_mean <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
datamergeX <- datamergeX[, data_mean]
names(datamergeX) <- features[data_mean, 2]
names(datamergeX) <- gsub("\\(|\\)", "", names(datamergeX))
names(datamergeX) <- tolower(names(datamergeX))
# 3. load activity_labels.tx with labels
labels <- read.table("../UCI HAR Dataset/activity_labels.txt")
labels[, 2] = gsub("_", "", tolower(as.character(labels[, 2])))
datamergeY[,1] = labels[datamergeY[,1], 2]
names(datamergeY) <- "activity"
# 4. Merge and labeled data
names(datamergesubject) <- "subject"
datalabeled<- cbind(datamergesubject, datamergeY, datamergeX)
write.table(datalabeled, "labeled_data.txt")
# 5. Creates a 2nd, independent tidy data set with the average of each variable for each activity and each subject.
uniqueSubjects = unique(datamergesubject)[,1]
numSubjects = length(unique(datamergesubject)[,1])
numLabels = length(labels[,1])
numCols = dim(datalabeled)[2]
result = datalabeled[1:(numSubjects*numLabels), ]
i = 1
for (j in 1:numSubjects) {
for (k in 1:numLabels) {
result[i, 1] = uniqueSubjects[j]
result[i, 2] = labels[k, 2]
tmp <- datalabeled[datalabeled$subject==j & datalabeled$activity==labels[k, 2], ]
result[i, 3:numCols] <- colMeans(tmp[, 3:numCols])
i = i+1
}
}
write.table(result, "averages_data.txt")
